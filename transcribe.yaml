AWSTemplateFormatVersion: "2010-09-09"
Description: "Create Lambda S3 triggger"

Parameters:
  MyBucketName:
    Description: S3 Bucket Name
    Type: String
    Default: transcribe-my-meeting-notes

Resources:
  MyIAMRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonTranscribeFullAccess
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: MyPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: !Sub arn:aws:s3:::${MyBucketName}
              - Effect: Allow
                Action:
                  - transcribe:*
                Resource: 
                  - "*"
              
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref FirstTriggerFunction
      Principal: s3.amazonaws.com
      SourceArn: !Sub 'arn:aws:s3:::${MyBucketName}'
      SourceAccount: !Ref AWS::AccountId
  FirstTriggerFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          from __future__ import print_function
          import time
          import boto3
          import uuid
          import json
          def lambda_handler(event, context):
              print(json.dumps(event))
              record = event['Records'][0]
              s3bucket = record['s3']['bucket']['name']
              s3object = record['s3']['object']['key']
              s3Path = f's3://{s3bucket}/{s3object}'
              jobName = f'{s3object}--{str(uuid.uuid4())}'
              outputKey = f'transcripts/{s3object}-transcript.json'
              client = boto3.client('transcribe')
              response = client.start_transcription_job(
                  TranscriptionJobName=jobName,
                  LanguageCode='en-US',
                  Settings = {'ShowSpeakerLabels': True,
                  'MaxSpeakerLabels': 10},
                  Media={'MediaFileUri': s3Path},
                  OutputBucketName=s3bucket,
                  OutputKey=outputKey
              )
              print (json.dumps(response, default=str))
              return {
                  'TranscriptionJobName': response['TranscriptionJob']['TranscriptionJobName']
              }
      Handler: index.lambda_handler
      Role: !GetAtt MyIAMRole.Arn
      Runtime: python3.8
      Timeout: 60
      Tags:
        - Key: Auto-Delete
          Value: No
  SecondTriggerFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import json
          def convert_transcript(infile, outfile):
              speaker_start_times = {}
              lines = []
              line = ''
              time = 0
              speaker = 'spk_1'
              recent_speaker = 'spk_1'
              import datetime
              print(f"Filename: {infile}")
              with open(outfile, "w+") as writeFile:
                  with open(infile) as readFile:
                      data = json.loads(readFile.read())
                      results = data.get("results")
                      try:
                          speaker_labels = results["speaker_labels"]
                      except KeyError:  # speaker labels are off; just return the transcript
                          transcript = results.get("transcripts")[0].get("transcript")
                          writeFile.write(f"{transcript}")
                          return
                      for label in speaker_labels.get("segments", []):
                          for item in label.get("items", []):
                              speaker_start_times.update({item.get("start_time"): item.get("speaker_label", "Anon")})
                      items = results.get("items", [])
                      for idx, item in enumerate(items):
                          if item.get("start_time"):  # This is a spoken item
                              speaker = speaker_start_times.get(item.get("start_time"), "Anon")
                              if speaker == recent_speaker:
                                  line+=f" {item.get('alternatives')[0].get('content')}"  # Append the content to line and repeat
                              else:  # New speaker
                                  lines.append({'speaker': recent_speaker, 'line': line, 'time': time})
                                  print(f"[{time}] {recent_speaker}: {line}")
                                  recent_speaker = speaker
                                  line=item.get('alternatives')[0].get('content')
                                  time=item.get('start_time')
                          elif item.get("type") == "punctuation":
                              line+=item.get('alternatives')[0].get('content')
                      lines.append({'speaker': speaker, 'line': line, 'time': time})
                      sorted_lines = sorted(lines, key=lambda k: float(k['time']))
                      for line_data in sorted_lines:
                          line = '[' + str(
                              datetime.timedelta(seconds=int(round(float(line_data['time']))))) + '] ' + line_data.get(
                              'speaker') + ': ' + line_data.get('line')
                          writeFile.write(f"{line}\n\n")
          def lambda_handler(event, context):
              import os, boto3
              s3_client = boto3.client('s3')
              for record in event['Records']:
                  bucket = record['s3']['bucket']['name']
                  key = record['s3']['object']['key']
                  localkey = os.path.basename(key)
                  txtfile = f"output/{localkey}.txt"
                  download_path = f"/tmp/{localkey}"
                  upload_path = f"/tmp/{localkey}.txt"
                  s3_client.download_file(bucket, key, download_path)
                  convert_transcript(download_path, upload_path)
                  s3_client.upload_file(upload_path, f'{bucket}', txtfile)
              return {'statusCode': 200, 'body': json.dumps('Transcription run.')}
      Handler: index.lambda_handler
      Role: !GetAtt MyIAMRole.Arn
      Runtime: python3.8
      Timeout: 300
      Tags:
        - Key: Auto-Delete
          Value: No
  MyBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref MyBucketName
      # Comment out below for Cloudformation creation and then uncomment the second time around.
      # Explanation can be found here: https://aws.amazon.com/blogs/mt/resolving-circular-dependency-in-provisioning-of-amazon-s3-buckets-with-aws-lambda-event-notifications/
      # NotificationConfiguration:
      #   LambdaConfigurations:
      #     - Event: s3:ObjectCreated:*
      #       Function: !GetAtt FirstTriggerFunction.Arn
      #       Filter:
      #         S3Key:
      #           Rules:
      #             - Name: Suffix
      #               Value: ".mp3"
      #     - Event: s3:ObjectCreated:*
      #       Function: !GetAtt FirstTriggerFunction.Arn
      #       Filter:
      #         S3Key:
      #           Rules:
      #             - Name: Suffix
      #               Value: ".mp4"
      #     - Event: s3:ObjectCreated:*
      #       Function: !GetAtt SecondTriggerFunction.Arn
      #       Filter:
      #         S3Key:
      #           Rules:
      #             - Name: Suffix
      #               Value: ".json"
      #             - Name: Prefix
      #               Value: "transcripts/"

